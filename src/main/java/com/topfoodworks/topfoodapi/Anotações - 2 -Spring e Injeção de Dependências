- 2 -Spring e Injeção de Dependências

    # CONTÉUDO

    ## Tópicos Concluídos

    - ✅ 2.1. Por que aprender e usar Spring
    - ✅ 2.2. Conhecendo o ecossistema Spring
    - ✅ 2.3. Spring vs Jakarta EE (Java EE)
    - ✅ 2.4. Conhecendo o Spring Boot
    - ✅ 2.5. Criando um projeto Spring Boot com Spring Initializr
    - ✅ 2.6. Conhecendo o Maven e o pom.xml de um projeto Spring Boot
    - ✅ 2.7. Criando um controller com Spring MVC
    - ✅ 2.8. Restart mais rápido da aplicação com DevTools
    - ✅ 2.9. O que é injeção de dependências  ”REVISAR”
    - ✅ 2.10. Conhecendo o IoC Container do Spring
    - ✅ 2.11. Definindo beans com @Component
    - ✅ 2.12. Injetando dependências (beans Spring)
    - ✅ 2.13. Usando @Configuration e @Bean para definir beans
    - ✅ 2.14. Conhecendo os pontos de injeção e a anotação @Autowired
    - ✅ 2.15. Dependência opcional com @Autowired
    - ✅ 2.16. Ambiguidade de beans e injeção de lista de beans
    - ✅ 2.17. Desambiguação de beans com @Primary
    @Nota
    (Retirando lista para receber apensa um notificador  e usamos @Primery que define qual sera o preferencial
    caso haja mais de um bens para o mesmo serviço )

    - ✅ 2.18. Desambiguação de beans com @Qualifier
    @Nota
    (Retirando O @Primery e ultilizando anotação @Qualifier("nome da ativação") ele encina que gosta de nomear )
    com nomes mais abrangentes exeplificou com o mensagens sms como "urgentes" e email como "normal" se surgir
    algo novo apenas renome-lo e pronto )

    - ✅ 2.19. Desambiguação de beans com anotação customizada
    @Nota
    (Retirando O @Qualifier e criando um arquivo tipo enumeração chamado "NivelUrgencia"
     e uma arquivo de anotação "TipoDoNotificador" isso fes que o Dev podesse mudar quando prioridade
     seria dada os objeto da class

     - ✅ 2.20. Mudando o comportamento da aplicação com Spring Profiles
     @Nota
      Aula maravilhosa aprendi a usar o profile e definir perfis para Desenvolvimento como
      Produção e posso criar um perfil com mais de um campo para nao mexe na produção nem no desenvolvimento
      axemplo um perfil de teste mais ele aplicasse a classe então nao é apenas colocar ele e todo
      sistema ja fica pronto ele é para as classes que tiverem ele.

     - ✅ 2.21. Criando métodos de callback do ciclo de vida dos beans
     @Nota
     Ele ensinou a que os bens tem um tempo de vida então e
     pra iniciar usamos: @PostConstruct
     e pra finalizar usamos: @PreDestroy
     Ele disse que nao usamos sempre mais precisando ultilizaresse é o passo


    ## Tópicos Não Concluídos


    - ❌ 2.22. Publicando e consumindo eventos customizados
    - ❌ 2.23. Configurando projetos Spring Boot com o application.properties
    - ❌ 2.24. Substituindo propriedades via linha de comando e variáveis de ambiente
    - ❌ 2.25. Criando e acessando propriedades customizadas com @Value
    - ❌ 2.26. Acessando propriedades com @ConfigurationProperties
    - ❌ 2.27. Alterando a configuração do projeto dependendo do ambiente (com Spring Profiles)
    - ❌ 2.28. Ativando o Spring Profile por linha de comando e variável de ambiente

    A lista acima representa o status de conclusão dos tópicos. Marque cada tópico conforme for progredindo no aprendizado do Spring Framework.